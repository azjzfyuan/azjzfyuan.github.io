<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于我的C语言练习</title>
    <link href="/2024/11/03/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84C%E8%AF%AD%E8%A8%80%E7%BB%83%E4%B9%A0/"/>
    <url>/2024/11/03/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84C%E8%AF%AD%E8%A8%80%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-C语言"><a href="#1-C语言" class="headerlink" title="1.C语言"></a>1.<strong>C语言</strong></h1><p>[TOC]</p><h4 id="1-C语言的数据类型"><a href="#1-C语言的数据类型" class="headerlink" title="1.C语言的数据类型"></a>1.C语言的数据类型</h4><h5 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h5><ul><li><h6 id="整型-Integer-："><a href="#整型-Integer-：" class="headerlink" title="**整型 (Integer)**："></a>**整型 (Integer)**：</h6><ul><li><code>int</code>：通常用于存储整数，大小通常为 4 字节（具体大小与编译器和系统有关）。</li><li><code>short</code>：短整型，通常为 2 字节。</li><li><code>long</code>：长整型，通常为 4 字节。</li><li><code>long long</code>：更长的整型，通常为 8 字节。</li></ul><p>这些类型有符号和无符号两种，分别是：</p><ul><li><code>signed int</code>：有符号整型，默认类型。</li><li><code>unsigned int</code>：无符号整型。</li></ul></li><li><h6 id="字符型-Character-："><a href="#字符型-Character-：" class="headerlink" title="**字符型 (Character)**："></a>**字符型 (Character)**：</h6><ul><li><code>char</code>：用于存储字符，通常为 1 字节。</li><li><code>unsigned char</code>：无符号字符型，范围为 0 到 255。</li><li><code>signed char</code>：有符号字符型，范围为 -128 到 127。</li></ul></li><li><p>**浮点型 (Floating point)**：</p><ul><li><code>float</code>：单精度浮点型，通常为 4 字节。</li><li><code>double</code>：双精度浮点型，通常为 8 字节。</li><li><code>long double</code>：扩展精度浮点型，通常为 12 或 16 字节。</li></ul></li></ul><p>下列不属于C语言数据类型的是（ B  ）</p><p>A.int</p><p>B.float</p><p>C.string</p><p>D.char</p><h4 id="2-运算的先后顺序"><a href="#2-运算的先后顺序" class="headerlink" title="2.运算的先后顺序"></a>2.运算的先后顺序</h4><p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411050007413.jpg" alt="微信图片_20241103112507"></p><p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411050007664.jpg" alt="微信图片_20241103112522"></p><p>x+a%3*(int)(x+y)%2&#x2F;4</p><h4 id="3-cin与cout"><a href="#3-cin与cout" class="headerlink" title="3.cin与cout"></a>3.cin与cout</h4><p>const double PI&#x3D;3.1415926;</p><p>则把PI保留3位小数输出的语句错误的是（ B   ）</p><p>A.cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;PI&lt;&lt;endl;             B.cout&lt;&lt;setprecision(3)&lt;&lt;PI&lt;&lt;endl;</p><p>即cout的保留格式：</p><p><strong>cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;PI&lt;&lt;endl</strong></p><h4 id="4-“123456789"><a href="#4-“123456789" class="headerlink" title="4.“123&lt;空格&gt;456&lt;空格&gt;789&lt;回车&gt;"></a>4.“123&lt;空格&gt;456&lt;空格&gt;789&lt;回车&gt;</h4><p>下列程序运行时输人“123&lt;空格&gt;456&lt;空格&gt;789&lt;回车&gt;”, 则输出结果是()。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123; <br><br><span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <br><br><span class="hljs-type">int</span> c, i;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;% c &quot;</span>, &amp;c); <br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d &quot;</span> ,&amp;i);<br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s &quot;</span>, s);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c ,%d,%s\n&quot;</span> ,c, i, s);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br> &#125;<br></code></pre></td></tr></table></figure><p>1,23,456</p><ol start="5"><li></li></ol><p>如下所示，为了将3.141593输入给变量d，应该在scanf函数中填入哪个格式符（）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> d;<br><span class="hljs-built_in">scanf</span>(“   “, &amp;d);<br></code></pre></td></tr></table></figure><p>A.%f   B.%.6f   C.%d  D.%lf</p><h4 id="5-格式字符"><a href="#5-格式字符" class="headerlink" title="5.格式字符"></a>5.格式字符</h4><p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411050007911.jpg" alt="微信图片_20241105000205"></p><p>7.加千分位分隔符（将一个数的各个位分开)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> a,b,c,d;<br>    cin&gt;&gt;a;<br>    b=a/<span class="hljs-number">1000000</span>;<br>    c=a/<span class="hljs-number">1000</span>-b*<span class="hljs-number">1000</span>;<br>    d=a-b*<span class="hljs-number">1000000</span>-c*<span class="hljs-number">1000</span>;<br>        cout&lt;&lt;b&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;c&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;d&lt;&lt;<span class="hljs-string">&quot;.00&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-关键字"><a href="#9-关键字" class="headerlink" title="9.关键字"></a>9.关键字</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span>、<span class="hljs-keyword">break</span>、<span class="hljs-keyword">case</span>、<span class="hljs-type">char</span>、<span class="hljs-type">const</span>、<span class="hljs-keyword">continue</span>、<span class="hljs-keyword">default</span>、<span class="hljs-keyword">do</span>、<span class="hljs-type">double</span>、<span class="hljs-keyword">else</span>、<span class="hljs-keyword">enum</span>、<span class="hljs-keyword">extern</span>、<span class="hljs-type">float</span>、<span class="hljs-keyword">for</span>、<span class="hljs-keyword">goto</span>、<span class="hljs-keyword">if</span>、<span class="hljs-type">int</span>、<span class="hljs-type">long</span>、<span class="hljs-keyword">register</span>、<span class="hljs-keyword">return</span>、<span class="hljs-type">short</span>、<span class="hljs-type">signed</span>、<span class="hljs-keyword">sizeof</span>、<span class="hljs-type">static</span>、<span class="hljs-keyword">struct</span>、<span class="hljs-keyword">switch</span>、<span class="hljs-keyword">typedef</span>、<span class="hljs-keyword">union</span>、<span class="hljs-type">unsigned</span>、<span class="hljs-type">void</span>、<span class="hljs-keyword">volatile</span>、<span class="hljs-keyword">while</span><br></code></pre></td></tr></table></figure><p>下列不是C语言的合法关键字的是__________。</p><p>A.switch   B.CHAR   C.case  D.default</p><h4 id="10-前n项和"><a href="#10-前n项和" class="headerlink" title="10.前n项和"></a>10.前n项和</h4><p><strong>1&#x2F;2+1&#x2F;3+1&#x2F;4+1&#x2F;5+1&#x2F;6+… 的前N项</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> i, n;<br><span class="hljs-type">double</span> sum;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>    sum = sum + <span class="hljs-number">1.0</span>/i;<br>&#125;<br></code></pre></td></tr></table></figure><p>没什么难度，唯一的易错点就是<strong>1.0&#x2F;i</strong>，原因是：定义的i是整形，相除得出的数字会变更成整数，使答案错误。</p><p><strong>1+2&#x2F;3+3&#x2F;5+4&#x2F;7+5&#x2F;9+6&#x2F;11+… 的前N项</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">double</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        sum +=(<span class="hljs-type">double</span>)i/(<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-失之毫厘，差之千里"><a href="#11-失之毫厘，差之千里" class="headerlink" title="11.失之毫厘，差之千里"></a>11.失之毫厘，差之千里</h4><p>本题要求根据某自助餐厅的收费标准计算餐费。具体标准如下：</p><p>6岁（含6岁）以下人群收费10元；<br>6-12岁（含12岁）半价收费；<br>超过12岁收全价78元；<br>为杜绝浪费，吃剩食材每250克收取10元<strong>（不足250克不收费）</strong>。</p><p>输入格式:</p><p>在一行中输入年龄与吃剩食材重量（整数，单位为克），其间以空格分隔。</p><p>输出格式:</p><p>在一行中输出应付餐费。</p><p>输入样例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">20</span> <span class="hljs-number">375</span><br></code></pre></td></tr></table></figure><p>输出样例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> year;<br>   <span class="hljs-type">int</span> kg;<br>   <span class="hljs-type">double</span> cost;<br>   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;year,&amp;kg);<br>   <span class="hljs-keyword">if</span>(year&lt;=<span class="hljs-number">6</span>)&#123;<br>    cost=<span class="hljs-number">10</span>+(kg/<span class="hljs-number">250</span>)*<span class="hljs-number">10</span>;<br>   &#125;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(year&lt;=<span class="hljs-number">12</span>)&#123;<br>    cost=<span class="hljs-number">39</span>+(kg/<span class="hljs-number">250</span>)*<span class="hljs-number">10</span>;<br>   &#125;<br>   <span class="hljs-keyword">else</span>&#123;<br>    cost=<span class="hljs-number">78</span>+(kg/<span class="hljs-number">250</span>)*<span class="hljs-number">10</span>;<br>   &#125;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.0f&quot;</span>,cost);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**printf(“%.0f”,cost);**要加上.0因为：…</p><h5 id="12-阶乘"><a href="#12-阶乘" class="headerlink" title="12.阶乘"></a>12.阶乘</h5><h5 id="13-输出素数"><a href="#13-输出素数" class="headerlink" title="13.输出素数"></a>13.输出素数</h5><h5 id="14-百钱买百鸡"><a href="#14-百钱买百鸡" class="headerlink" title="14.百钱买百鸡"></a>14.百钱买百鸡</h5><h5 id="15-运算"><a href="#15-运算" class="headerlink" title="15.运算"></a>15.运算</h5><p>若有以下变量定义：int  b&#x3D;2;  float  a&#x3D;5;则表达式“a&#x2F;b”之值为(2.5)</p><p><strong>在进行运算时，C 语言会将较小类型的变量</strong>（这里是 <code>int</code> 类型的 <code>b</code>）<strong>提升为较大类型</strong>（即 <code>float</code>）以进行计算。也就是说，<code>b</code> 将被转换为 <code>2.0</code>。</p><h5 id="16-0-00会在下被输出为-0-00"><a href="#16-0-00会在下被输出为-0-00" class="headerlink" title="16.0.00会在下被输出为-0.00"></a>16.0.00会在下被输出为-0.00</h5><p>在C&#x2F;C++中，输出<code>-0.00</code>的现象与浮点数的表示和计算精度有关。为了避免输出<code>-0.00</code>，我们在代码中加入了条件表达式 <code>value == -0.00 ? 0.00 : value</code> 来确保零值总是输出为正的 <code>0.00</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> root = -c / b;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>, root == <span class="hljs-number">-0.00</span> ? <span class="hljs-number">0.00</span> : root);<br></code></pre></td></tr></table></figure><h5 id="17-（7）"><a href="#17-（7）" class="headerlink" title="17.（7）"></a>17.（7）</h5><p><img src="https://cdn.jsdelivr.net/gh/azjzfyuan/images/202411050008865.png" alt="屏幕截图 2024-11-03 182909"></p><h5 id="18-水仙花数"><a href="#18-水仙花数" class="headerlink" title="18.水仙花数"></a>18.水仙花数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> a = n / <span class="hljs-number">100</span>;       <br>    <span class="hljs-type">int</span> b = (n / <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>; <br>    <span class="hljs-type">int</span> c = n % <span class="hljs-number">10</span>; <br>    <span class="hljs-keyword">if</span>(a*a*a+b*b*b+c*c*c==<span class="hljs-number">100</span>*a<span class="hljs-number">+10</span>*b+c)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2024/10/27/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/10/27/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>一，<strong>搭建前的软件准备</strong>（git，node）<br>搭建之前需要准备的软件：<br>1.Git：官网下载：<a href="https://git-scm.com/">https://git-scm.com/</a><br>2.Node.js 官网下载：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><p>二，** 安装hexo**，完成简单本地页面展示<br>1.进入cmd窗口输入指令：npm install -g hexo-cli</p><p>三,接下来<strong>初始化一下hexo</strong></p><p>1.输入：<code>hexo init</code></p><p>2..查看是否能启动成功:输入：hexo s</p><p>3.复制网址打开</p><p><a href="http://localhost:4000/">http://localhost:4000/</a><br>(此时博客已经在本地搭建好了)</p><p>之后，我们需要部署到github上。</p><p>ctrl+C停止；</p><p>三，<strong>将Hexo部署到Github</strong><br>1.Github创建个人仓库<br>注册一个github账号。登上账号后建一个仓库：仓库名为你的用户名.github.io，<img src="https://i-blog.csdnimg.cn/blog_migrate/64a3b7752c3c3c6020606d39fe1bf3f9.png" alt="在这里插入图片描述"><br>注意：<br>创建一个和你用户名相同的仓库，后面加.github.io，</p><p>xxxx.github.io，其中xxx就是你注册GitHub的用户名.</p><p>2.生成ssh添加到Github<br>在Github上创建仓库完成之后，需要设置ssh免密登录</p><p>具体操作：打开cmd窗口：执行如下命令：</p><p><code>git config --global user.name &quot;yourname&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code></p><p>（这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。</p><p>用户名为仓库的名称，邮箱为注册github的邮箱）</p><p>以防万一，用以下代码验证：</p><p><code>git config user.name</code><br><code>git config user.email</code></p><p>3.接着进入到家目录：C:\Users\libinbin，右击打开git bash 。<br>输入：</p><p><code>ssh-keygen -t rsa -C 2412757158@qq.com</code></p><p>后面是自己注册github的邮箱，然后敲三次回车，</p><p>4.接着就会发现C:\Users\libinbin下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥，我们需要打开它，复制里面的内容。</p><p>然后进入github</p><p>点击setings</p><p>把刚刚复制的密钥粘进去，title随便起</p><p>点击 Add SSH Key</p><p>3.进行部署<br>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为</p><p><code>deploy:</code></p><p><code>type: git</code></p><p><code>repo: git@github.com:goubin18/goubin18.github.io.git</code></p><p><code>branch: main</code></p><p>（注意：后面有空格）</p><p>（repo：获取步骤如下<img src="D:\hp\Pictures\PixPin_2024-10-27_23-37-56.png"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/226396db3e5a8db9b1358fb7d7151d3a.png" alt="在这里插入图片描述"></p><p>点进自己刚刚创建的仓库）复制</p><p>4.找到自己的博客路径打开</p><p>这个时候需要先安装deploy-git </p><p>npm install hexo-deployer-git –save</p><p>5.然后依次执行以下命令：</p><p><code>hexo c   #清除缓存文件 db.json 和已生成的静态文件 public</code><br><code>hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</code><br><code>hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</code></p><p>注意输出hexo d时会让输个yes</p><p>最后回到github上查看自己的仓库：</p><p>现在就可以使用xxx.github.io来访问你的博客啦</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/27/hello-world/"/>
    <url>/2024/10/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
